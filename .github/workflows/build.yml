name: build

on:
  pull_request:
    branches: [main]
  push:
    branches:
      - main
      - dev

env:
  MESON_ARGS: >-
    --auto-features=enabled
    --fatal-meson-warnings
    -Danticheat-server=true
    -Davcodec=disabled
    -Dclient-gtv=true
    -Dpacketdup-hack=true
    -Dtests=true
    -Dvariable-fps=true


  MESON_ARGS_WIN: >-
    -Dsdl2=disabled
    -Dwayland=disabled
    -Dwrap_mode=forcefallback
    -Dx11=disabled


jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: ["x64"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/cache@v4
        with:
          path: subprojects/packagecache
          key: ${{ hashFiles('subprojects/*.wrap') }}

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - uses: ilammy/setup-nasm@v1

      - name: Install dependencies
        run: pip3 install --no-input meson ninja

      - name: Build
        run: |
          meson setup ${{ env.MESON_ARGS }} ${{ env.MESON_ARGS_WIN }} builddir --buildtype=release
          meson compile -C builddir

      - name: Compress artifacts to .zip
        run: |
          mkdir artifacts
          cp builddir/q2pro_race.exe artifacts/
          cd artifacts
          7z a -tzip ../q2pro_race-windows-x86_64.zip *
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 2
          name: q2pro_race-windows-x86_64
          path: q2pro_race-windows-x86_64.zip

  release:
    if: github.ref == 'refs/heads/omg'
    needs: [windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: q2pro_race-*
          path: artifacts
          merge-multiple: true

      - name: Create or update "latest" release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view latest --json name --jq .name >/dev/null 2>&1; then
            echo "Updating 'latest' release"
            gh release edit latest -t "Latest" -n "Automatically updated latest build" --latest
          gh release upload latest ./artifacts/* --clobber
          else
            echo "Creating 'latest' release"
            gh release create latest ./artifacts/* --title "Latest" --notes "Automatically updated latest build"
          fi
      - name: Update tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "tags/latest",
              sha: context.sha,
              force: true
            })
